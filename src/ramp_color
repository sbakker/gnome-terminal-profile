#!/usr/bin/perl
# ============================================================================
#
#         File:  ramp_color
#
#        Usage:  See POD at end.
#
#  Description:  Show color ramp for a given color in gnome-terminal
#
#       Author:  Steven Bakker (SB), <sb@monkey-mind.net>
#      Created:  12 Dec 2017
#
#   Copyright (c) 2017 Steven Bakker; All rights reserved.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the same terms as Perl itself. See "perldoc perlartistic".
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ============================================================================

use v5.14;
use strict;
use warnings;

use FindBin;
use Getopt::Long;
use Pod::Usage;
use Getopt::Long;
use List::Util qw( first );
use Term::ReadKey qw( GetTerminalSize );

$::VERSION = '1.01';
my $app_header = "\nThis is $FindBin::Script, v$::VERSION\n\n"
               . "See \"perldoc $FindBin::Script\" for more information.\n"
               ;

my ($WCHAR, $HCHAR, $WPIXELS, $HPIXELS) = GetTerminalSize();

my $MAX_STEPS = $WCHAR - 2;

my $LOREM_IPSUM = join(' ', split(' ', qq{
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
    eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
    enim ad minim veniam, quis nostrud exercitation ullamco laboris
    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
    reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
    culpa qui officia deserunt mollit anim id est laborum.
}));

my $RGB_FILE = first { -f $_ } qw(
    /usr/share/X11/rgb.txt
    /usr/lib/X11/rgb.txt
);

Getopt::Long::Configure("bundling");

GetOptions(
    'help|?'     => sub {
        pod2usage(-msg => $app_header, -exitval=>0, -verbose=>0)
    },
    'manual'     => sub { pod2usage(-exitval=>0, -verbose=>2) },
    'version|V'  => sub { print $app_header; exit(0) },
    # Custom options.
    'steps|s=i'  => \(my $steps = 50),
    'level|l=f'  => \(my $level = 50),
    'text|t=s'   => \(my $text = $LOREM_IPSUM),
) or pod2usage(-exitval=>2);

pod2usage(-message => "\nNeed at most one argument\n", -exitval => 2)
    if @ARGV > 1;

my $color = @ARGV ? shift @ARGV : '#808080';

if (lc $color eq 'random') {
	$color = sprintf("#%06x", rand(0x1000000));
}
$color = shade_color($color);

$level = 100 if $level > 100;
$level = -100 if $level < -100;

$text  = $LOREM_IPSUM if $text !~ /\S/;
my $tsteps = length($text);
$tsteps = $MAX_STEPS if $tsteps > $MAX_STEPS;

$steps = $MAX_STEPS if $steps > $MAX_STEPS;

my $base     = shade_color($color, 0);
my $end      = shade_color($color, $level);
my $stepsize = $level*1.0/$steps;

if (abs($stepsize) < 1) {
    $steps = abs($level);
    $stepsize = $level*1.0/$steps;
}

say "Base colour: |"
    .rgb_str("  ", $base, $base)
    ."| ($base)";
say "End colour:  |"
    .rgb_str("  ", $end, $end)
    ."| ($end)";

say "Step size:   ".sprintf("%0.2f%%", $stepsize);
say "Steps:       $steps";
print "\n";

for my $step (0..$steps) {
    my $l = $level/$steps * $step;
    my $c = shade_color($color, $l);
    print rgb_str(' ', $c, $c);
}
print "\n";

for my $step (0..$tsteps) {
    my $l = $level/$tsteps * $step;
    my $c = shade_color($color, $l);
    print fg_start($c).substr($text, $step%length($text), 1).rgb_end();
}
print "\n";

my %str;
for my $fg ('black', 'white') {
    my $str = '';
    for my $step (0..$tsteps) {
        my $l = $level/$tsteps * $step;
        my $c = shade_color($color, $l);
        $str .= rgb_str(substr($text, $step%length($text), 1), $c, $fg);
    }
    $str{"fg_$fg"} = $str."\n";
    $str = '';
    for my $step (0..$tsteps) {
        my $l = $level/$tsteps * $step;
        my $c = shade_color($color, $l);
        $str .= rgb_str(substr($text, $step%length($text), 1), $fg, $c);
    }
    $str{"bg_$fg"} = $str."\n";
}

print $str{fg_white},$str{fg_black},$str{bg_white},$str{bg_black};

exit 0;

sub get_rgb {
    state $rgb = undef;

    return $rgb if defined $rgb;
    $rgb = {};
    return $rgb if !defined $RGB_FILE;

    open my $fh, '<', $RGB_FILE
        or die "Cannot read $RGB_FILE: $!\n";

    while (my $l = <$fh>) {
        next unless $l =~ /^\s*(\d+)\s+(\d+)\s+(\d+)\s+(.*)$/;
        my ($r, $g, $b, $name) = ($1, $2, $3, lc $4);
        $rgb->{$name} = [ $r, $g, $b ];
    }
    return $rgb;
}

sub shade_color {
    my ($color, $level) = @_;

    my @color = parse_rgb($color);

    #$level = 254.0 - 254.0/100 * $level;
    my $newcolor = '#';

    $level //= 0;

    if ($level >= 0) {
        # Lighten...
        for my $comp (@color) {
            my $delta = 0xff - $comp;
            $comp += $delta/100 * $level;
            $newcolor .= sprintf("%02X", $comp+0.5);
        }
    }
    else {
        # Darken...
        for my $comp (@color) {
            $comp += $comp/100 * $level;
            $newcolor .= sprintf("%02X", $comp+0.5)
        }
    }
    return $newcolor;
}


sub parse_rgb {
    my $color = shift @_;

    $color =~ s/\s//g;

    my @color = ( 127, 127, 127 );

    if ($color =~ /^#(..)(..)(..)$/) {
        @color = (hex($1), hex($2), hex($3));
    }
    elsif ($color =~ /^#(.)(.)(.)$/) {
        @color = (hex($1), hex($2), hex($3));
    }
    elsif ($color =~ /^rgb\((\d+),(\d+),(\d+)\)$/) {
        @color = ($1, $2, $3);
    }
    else {
        $color = lc $color;
        my $rgb = get_rgb();
        if (exists $rgb->{$color}) {
            @color = @{$rgb->{$color}};
        }
        else {
            die "Cannot parse color name '$color'\n";
        }
    }
    return @color;
}

sub fg_start {
    my $fg = shift @_;
    my @fg = parse_rgb($fg // '#808080');
    return "\x1b[38;2;$fg[0];$fg[1];$fg[2]m";
}

sub bg_start {
    my $bg = shift @_;
    my @bg = parse_rgb($bg // '#101010');
    return "\x1b[48;2;$bg[0];$bg[1];$bg[2]m";
}

sub rgb_start {
    my ($bg, $fg) = @_;

    my @bg = parse_rgb($bg // '#101010');
    my @fg = parse_rgb($fg // '#808080');

    return fg_start($fg).bg_start($bg);
}

sub rgb_end {
    return "\x1b[0m";
}

sub rgb_str {
    my ($str, $bg, $fg) = @_;

    return rgb_start($bg, $fg)
         . $str
         . rgb_end();
}

__END__

=head1 NAME

ramp_color - show a color ramp for a given color

=head1 SYNOPSIS

B<ramp_color>
[B<--steps>=I<STEPS>]
[B<--level>=I<[+-]LEVEL>]
[B<--text>=I<STR>]
I<color>

B<ramp_color>
[B<-s> I<STEPS>]
[B<-l> I<[+-]LEVEL>]
[B<-t> I<STR>]
I<color>

B<ramp_color> {B<--help> | B<-h> | B<-?>}

B<ramp_color> {B<--version> | B<-V>}

B<ramp_color> {B<--manual> | B<-m>}

=head1 DESCRIPTION

Print a color ramp for I<color> going from I<color> to I<LEVEL>
percent lighter or darker in I<STEPS> steps.

=head1 OPTIONS

=over

=item B<--version>, B<-V>
X<--version>X<-V>

Print program version to F<STDOUT> and exit.

=back

=head1 EXAMPLES

=head1 EXIT CODE

=over

=item I<zero>

Success.

=item I<non-zero>

One or more errors occurred.

=back

=head1 AUTHOR

Steven Bakker E<lt>sb@monkey-mind.netE<gt>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2014-2017 Steven Bakker; All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See "perldoc perlartistic".

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
