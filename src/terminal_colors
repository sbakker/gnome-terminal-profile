#!/usr/bin/perl
# ============================================================================
#
#         File:  terminal_colors
#
#        Usage:  See POD at end.
#
#  Description:  Show colors available in the terminal emulator
#
#       Author:  Steven Bakker (SB), <sb@monkey-mind.net>
#      Created:  14 Dec 2017
#
#   Copyright (c) 2014-2017 Steven Bakker; All rights reserved.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the same terms as Perl itself. See "perldoc perlartistic".
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ============================================================================
use v5.14;
use strict;
use warnings;

use FindBin;
use Getopt::Long;
use Pod::Usage;

use Term::ReadKey qw( GetTerminalSize );

# Values set on the Command Line.
my $opt_debug     = 0;

$::VERSION     = '1.00';
my $app_header = "\nThis is $FindBin::Script, v$::VERSION\n\n"
               . "See \"perldoc $FindBin::Script\" for more information.\n"
               ;

sub debug(@)   { print STDERR @_ if $opt_debug }

sub Main {
    my $opts = init_options(
        opts => {},
        min_args => 0,
        max_args => 1
    );

    my $mode = $ARGV[0] //= 'compact';

    if (lc $mode eq substr('truecolor', 0, length($mode)) or lc $mode eq 'tc') {
        show_truecolor();
    }
    elsif (lc $mode eq substr('full', 0, length($mode))) {
        show_fullcolor();
    }
    elsif (lc $mode eq substr('compact', 0, length($mode))) {
        show_default('compact');
    }
    elsif (lc $mode eq substr('wide', 0, length($mode))) {
        show_default('wide');
    }
    else {
        die "$FindBin::Script: unknown mode '$mode'\n";
    }
}

sub init_options {
    my %args = (
        min_args => -1,
        max_args => -1,
        opts     => {},
        @_
    );
    my $opts = $args{opts};
    my $min_args = $args{min_args};
    my $max_args = $args{max_args};

    Getopt::Long::Configure("bundling");

    GetOptions(
        # Boiler-plate options.
        'debug|d+'          => \$opt_debug,
        'help|?|h'          => sub {
            pod2usage(-msg => $app_header, -exitval=>0, -verbose=>0)
        },
        'manual'            => sub { pod2usage(-exitval=>0, -verbose=>2) },
        'version|V'         => sub { print $app_header; exit(0) },
        # Custom options.
        %$opts,
    ) or pod2usage(-exitval=>2);

    my $args_required = $min_args > 0 ? $min_args : 0;

    if ($min_args > 0) {
        if ($max_args > $min_args) {
            $args_required = "between $min_args and $max_args";
        }
        elsif ($max_args == $min_args) {
            $args_required = $min_args;
        }
        else {
            $args_required = "at least $min_args";
        }
    }
    elsif ($max_args > 0) {
        $args_required = "no more than $max_args";
    }
    else {
        $args_required = "none";
    }

    if ($min_args > 0 && @ARGV < $min_args) {
        pod2usage(
            -message => "\nNot enough arguments ($args_required expected)\n",
            -exitval => 2);
    }
    elsif ($max_args >= 0 && @ARGV > $max_args) {
        pod2usage(
            -message => "\nToo many arguments ($args_required expected)\n",
            -exitval => 2);
    }
}


Main();

#############################################################################
sub color_code {
#############################################################################
    my ($red, $green, $blue) = @_;
    return 16 + ($red * 36) + ($green * 6) + $blue;
}

#############################################################################
sub show_truecolor {
#############################################################################
    # Full spectrum, only works on TrueColor terminals.
    my ($w, $h) = GetTerminalSize;

    my $stepsize = 512/($w-2);
    my $red_stepsize = 256/($h-2);

    for (my $r = 0; $r < 255; $r += $red_stepsize) {
        my $red = int($r);
        for (my $b = 0; $b < 255; $b += $stepsize) {
            my $blue = int($b);
            my $green = int(($red + $blue)/2);
            print "\x1b[48;2;${red};${green};${blue}m ";
        }
        for (my $g = 255; $g > 0; $g -= $stepsize) {
            my $green = int($g);
            my $blue = int(($red + $green)/2);
            print "\x1b[48;2;${red};${green};${blue}m ";
        }
        print "\x1b[0m\n";
    }
    debug sprintf("WxH=%dx%d; stepsize=%0.2f; red_stepsize=%0.2f\n",
                $w, $h, $stepsize, $red_stepsize);

}

#############################################################################
sub show_fullcolor {
#############################################################################
    my $x = 0;

    my ($w, $h) = GetTerminalSize;
 
    # Print all colors from the 6x6x6 color cube, but also show
    # the RGB components of them.
    for (my $red = 0; $red < 6; $red++) {
        for (my $green = 0; $green < 6; $green++) {
            for (my $blue = 0; $blue < 6; $blue++) {
                my $cnum = 16 + ($red * 36) + ($green * 6) + $blue;
                my $s = sprintf(
                    "%3d #%02x%02x%02x [\x1b[48;5;%dm   \x1b[0m]",
                    $cnum,
                    ($red ? ($red * 40 + 55) : 0),
                    ($green ? ($green * 40 + 55) : 0),
                    ($blue ? ($blue * 40 + 55) : 0),
                    $cnum,
                );

                if ($x + 17 + 4 >= $w-1) {
                    print "\n";
                    $x = 0;
                }
                elsif ($x) {
                    print ' ' x 4;
                    $x += 4;
                }
                print $s;
                $x += 17;
            }
        }
    }

    # colors 232-255 are a grayscale ramp, intentionally leaving out
    # black and white
    for (my $gray = 0; $gray < 24; $gray++) {
        my $level = ($gray * 10) + 8;
        my $cnum = 232 + $gray;
        my $s = sprintf("%3d #%02x%02x%02x [\x1b[48;5;%dm   \x1b[0m]",
            $cnum,
            $level, $level, $level,
            $cnum,
        );
        if ($x + 17 + 4 >= $w-1) {
            print "\n";
            $x = 0;
        }
        else {
            print ' ' x 4;
            $x += 4;
        }
        print $s;
        $x += 17;
    }
    print "\n";
}

sub show_default {
    my $mode = shift @_;
    # This is close to the original, but it shows a compacted color
    # cube with color numbers before every block.

    # first the system ones:
    print "System colors:\n";
    for (my $color = 0; $color < 8; $color++) {
        print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m  (0-7)\n";
    for (my $color = 8; $color < 16; $color++) {
        print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m  (8-15)\n\n";

    # now the color cube
    print "Color cube, 6x6x6 (".color_code(0,0,0)."-".color_code(5,5,5)."):\n";
    for (my $green = 0; $green < 6; $green++) {
        for (my $red = 0; $red < 6; $red++) {
            if ($mode !~ /wide/i) {
                printf "  %3d ", color_code($red, $green, 0);
            }
            else {
                print " " if $red;
            }

            for (my $blue = 0; $blue < 6; $blue++) {
                my $color = color_code($red, $green, $blue);
                print "\x1b[48;5;${color}m ";
                print " " if $mode =~ /wide/i;
            }
            print "\x1b[0m";
        }
        print "\n";
    }

    # now the grayscale ramp
    print "\nGrayscale ramp (232-255):\n";
    for (my $color = 232; $color < 256; $color++) {
        print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m\n";
}

__END__

=head1 NAME

terminal_colors - show colors available in the terminal (emulator)

=head1 SYNOPSIS

B<terminal_colors> [B<--debug>]
[
B<compact>
|
B<wide>
|
B<full>
|
B<truecolor>
]

B<terminal_colors> [B<--version>] [B<--manual>] [B<--help>]

B<terminal_colors> [B<-Vh?>]

=head1 DESCRIPTION

Show color matrix for the terminal emulator.

The default is to print a B<compact> list of the 256 color palette, see
L<Mode Arguments|/Mode Arguments> below.

=head2 Mode Arguments

=over

=item C<wide>

The output of the original C<256colors.pl>:

=over

=item *

The 16 "system" colors (i.e. the terminal's standard palette).

=item *

The 6x6x6 color cube (colors 16-231).

=item *

The greyscale ramp (colors 232-255).

=back

=item C<compact> (default)

Similar to C<wide>, except that the color cube is compacted, and
each block is prefixed with the number of the first color in that
block.

=item C<full>

Show all colors from 16-255, along with their RGB color specification.

=item C<truecolor>, C<tc>

Shows a spectrum of colors that fits the current terminal size, stepping
colors as necessary. This only works if the terminal supports TrueColor.

=back

=head1 OPTIONS

=over

=item B<--version>, B<-V>
X<--version>X<-V>

Print program version to F<STDOUT> and exit.

=item B<--debug>, B<-d>
X<--debug>X<-d>

Print some debugging output.

=item B<--help>, B<-h>, B<-?>
X<--help>X<-h>X<-?>

Print help message and exit.

=item B<--manual>
X<--manual>

Show this manual page.

=back

=head1 EXIT CODE

=over

=item I<zero>

Success.

=item I<non-zero>

One or more errors occurred.

=back

=head1 AUTHOR

Based on C<256colors.pl> from the XFree86 distribution:

    Author: Todd Larason <jtl@molehill.org>
    $XFree86: xc/programs/xterm/vttests/256colors2.pl,v 1.2
        2002/03/26 01:46:43 dickey Exp $

Modifications by Steven Bakker E<lt>sb@monkey-mind.netE<gt>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2014-2017 Steven Bakker; All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See "perldoc perlartistic".

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
