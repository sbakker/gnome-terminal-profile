#!/usr/bin/perl
# ============================================================================
#
#         File:  theme_to_yaml.pl
#
#        Usage:  See POD at end.
#
#  Description:  Create YAML file from Gnome Terminal colour profile.
#
#       Author:  Steven Bakker (SB), <sb@monkey-mind.net>
#      Created:  30 Nov 2017
#
#   Copyright (c) 2017 Steven Bakker; All rights reserved.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the same terms as Perl itself. See "perldoc perlartistic".
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ============================================================================

use v5.10;
use strict;
use warnings;

use FindBin;
use Getopt::Long;
use Pod::Usage;
use Getopt::Long;
use Time::Piece;

$::VERSION = '1.00';
my $app_header = "\nThis is $FindBin::Script, v$::VERSION\n\n"
               . "See \"perldoc $FindBin::Script\" for more information.\n"
               ;

# Default "Tango" Scheme.
my @dfl_palette = (
    [ 'rgb(0,0,0)',       'rgb(85,87,83)'    ],
    [ 'rgb(204,0,0)',     'rgb(239,41,41)'   ],
    [ 'rgb(78,154,6)',    'rgb(138,226,52)'  ],
    [ 'rgb(196,160,0)',   'rgb(252,233,79)'  ],
    [ 'rgb(52,101,164)',  'rgb(114,159,207)' ],
    [ 'rgb(117,80,123)',  'rgb(173,127,168)' ],
    [ 'rgb(6,152,154)',   'rgb(52,226,226)'  ],
    [ 'rgb(211,215,207)', 'rgb(238,238,236)' ],
);

Getopt::Long::Configure("bundling");

GetOptions(
    'help|?'     => sub {
        pod2usage(-msg => $app_header, -exitval=>0, -verbose=>0)
    },
    'manual'     => sub { pod2usage(-exitval=>0, -verbose=>2) },
    'version|V'  => sub { print $app_header; exit(0) },
    # Custom options.
    'show|s'     => \(my $opt_show),
) or pod2usage(-exitval=>2);

pod2usage(-message => "\nNeed one 'dir' argument\n", -exitval => 2)
    unless @ARGV >= 1;

my $dir = shift @ARGV;

chdir $dir or die "$FindBin::Script: cannot chdir to $dir: $!\n";

my %theme = ();
if (open my $fh, '<', 'palette') {
    my @input = (<$fh>);
    for my $i (0..7) {
        chomp(my $normal = $input[$i] // '');
        my @pair;

        $normal =~ s/['"]//g;
        if ($normal !~ /\S/) {
            @pair = @{$dfl_palette[$i]};
            say STDERR "** WARNING: missing color #$i in palette";
        }
        else {
            $normal = canonical_color($normal);
            @pair = ( $normal, $normal );
        }

        chomp(my $bright = $input[8+$i] // '');
        $bright =~ s/['"]//g;
        if ($bright =~ /\S/) {
            $pair[1] = canonical_color($bright);
        }
        $theme{"color$i"} = \@pair;
    }
}
else {
    say STDERR "** WARNING: cannot read $dir/palette: $!";
    say STDERR "** WARNING: => using default (Tango) palette";
    for my $i (0..7) {
        $theme{"color$i"} = [ @{$dfl_palette[$i]} ];
    }
}

for my $key (qw( bg fg bd )) {
    if (open my $fh, '<', "${key}_color") {
        chomp(my $color = <$fh>);
        $color = canonical_color($color);
        $theme{$key} = $color;
    }
    else {
        say STDERR "** WARNING: cannot read $dir/${key}_color: $!";
    }
}

$theme{bg} //= $theme{color0}->[0];
$theme{fg} //= $theme{color7}->[0];
$theme{bd} //= $theme{fg};
$theme{map} = {
    $theme{bg} => '*bg',
    $theme{bd} => '*bd',
    $theme{fg} => '*fg',
};

if ($opt_show) {
    open my $pipe, '|-', "$FindBin::Bin/parse_yaml_theme.pl", '-', 'show';
    print $pipe make_yaml($dir, \%theme);
    close $pipe or die "** Error running parse_yaml_theme.pl: $!\n";
}
else {
    print make_yaml($dir, \%theme);
}


sub canonical_color {
    my $color = shift @_;

    chomp($color);
    $color = rgb2hex($color) if $color =~ /rgb\(/i;
    return uc $color;
}


sub make_yaml {
    my ($dir, $theme_ref) = @_;
    my $date = localtime->strftime("%d-%b-%Y %T %z");
    my $yaml =<<EOF;
# YAML dump of $dir
# Generated by $FindBin::Script, $date
---
bd: \&bd '$$theme_ref{bd}'
fg: \&fg '$$theme_ref{fg}'
bg: \&bg '$$theme_ref{bg}'
EOF
    for my $i (0..7) {
        my $key = "color$i";
        my @pair = resolve_colors($theme_ref, @{$theme_ref->{$key}});

        $yaml .= "$key: ";
        if ($pair[0] eq $pair[1]) {
            $yaml .= $pair[0]."\n";
        }
        else {
            $yaml .= "[ ". join(", ", @pair) . " ]\n";

        }
    }
    return $yaml;
}


sub resolve_colors {
    my ($theme_ref, @colors_in) = @_;

    my @colors_out;
    for my $cin (@colors_in) {
        my $cout = $theme_ref->{map}{$cin} // $cin;
        $cout = "'$cout'" if $cout !~ /^\*/;
        push @colors_out, $cout;
    }
    return @colors_out;
}


sub rgb2hex {
    my @result;
    for my $rgb (@_) {
        $rgb =~ s/\s//g;
        if ($rgb =~ /^rgb\((\d+),(\d+),(\d+)\)$/i) {
            push @result, sprintf("#%02X%02X%02X", $1, $2, $3);
        }
        else {
            push @result, $rgb;
        }
    }
    return @result == 1 ? $result[0] : @result;
}


__END__

=head1 NAME

theme_to_yaml.pl - create YAML from gnome-terminal-colors scheme

=head1 SYNOPSIS

B<theme_to_yaml.pl> [B<--show>] I<DIR>

=head1 DESCRIPTION

Read the contents of the gnome-terminal-colors directory I<DIR> and
convert it to a single YAML file. The YAML file is printed to F<STDOUT>.

The gnome-terminal-colors directory typically contains four files:
F<bd_color>, F<bg_color>, F<fg_color>, and F<palette>. The first three
should contain a single line with a color value, the last should contain
16 lines with a single color value on each line.

=head1 OPTIONS

=over

=item B<--show>, B<-s>
X<--show>X<-s>

Show the colour matrix of the theme. by feeding the YAML into
C<parse_yaml_theme.pl>

The following commands are equivalent:

  /path/to/theme_to_yaml.pl --show DIR

  /path/to/theme_to_yaml.pl DIR | /path/to/parse_yaml_theme.pl - show

=back

=head1 EXAMPLE

=head2 Input

F<theme1/bd_color>

    #E3CEAB

F<theme1/bg_color>

    #1C1C1C

F<theme1/fg_color>

    #BABDB6

F<theme1/palette>

    #1C1C1C
    #DD9393
    #7F9F7F
    #E3CEAB
    #DFAF8F
    #C693A4
    #8CD0D3
    #BABDB6
    #3F3F3F
    #EEA3A3
    #8FAF8F
    #F3DEBB
    #EFBF9F
    #D7A3B4
    #9CE0E3
    #DCDCCC

=back

=head2 Command

    $ /path/to/theme_to_yaml.pl theme1

=head3 Output

    # YAML dump of ../colors/ztevenburn
    # Generated by theme_to_yaml.pl, 30-Nov-2017 15:53:30 +0100
    ---
    bd: &bd '#E3CEAB'
    fg: &fg '#BABDB6'
    bg: &bg '#1C1C1C'
    color0: [ *bg, '#3F3F3F' ]
    color1: [ '#DD9393', '#EEA3A3' ]
    color2: [ '#7F9F7F', '#8FAF8F' ]
    color3: [ *bd, '#F3DEBB' ]
    color4: [ '#DFAF8F', '#EFBF9F' ]
    color5: [ '#C693A4', '#D7A3B4' ]
    color6: [ '#8CD0D3', '#9CE0E3' ]
    color7: [ *fg, '#DCDCCC' ]

=head1 EXIT CODE

=over

=item I<zero>

Success.

=item I<non-zero>

One or more errors occurred.

=back

=head1 AUTHOR

Steven Bakker E<lt>sb@monkey-mind.netE<gt>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2017 Steven Bakker; All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See "perldoc perlartistic".

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
